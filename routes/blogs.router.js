const express = require('express');
const router = express.Router();
const BlogsController = require('../controllers/blogs.controller');
const jwtVerify = require('../helpers/jwtVerify');

/**
 * @api {get} /v1/blogs Get blogs
 * @apiName GetBlogs
 * @apiGroup Blogs
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a list of blogs. You can query this endpoint with parameter 'news_site' to return
 * blogs provided by a particular news site. This endpoint can also be queried with 'search' to search
 * for blogs which match your search parameter.
 *
 * Also supports page, limit, offset and sort options.
 *
 * @apiExample Search for blogs
 * https://spaceflightnewsapi.net/api/v1/blogs?search=bennu
 *
 * @apiExample Search for articles published by SpaceX
 * https://spaceflightnewsapi.net/api/v1/blogs?news_site=planetarysociety
 *
 * @apiParam {String} title Title of the blog.
 * @apiParam {String} news_site News site that published the blog.
 * @apiParam {String} news_site_long Unformatted name of the news site that published the blog.
 * @apiParam {String} url URL of the blog.
 * @apiParam {String} featured_image Featured image of the blog.
 * @apiParam {Number} id ID from the news site.
 * @apiParam {Number} _id ID generated by SNAPI.
 * @apiParam {Number} date_published Date when news site added the blog
 * @apiParam {Number} date_added Date when blog was added to SNAPI
 * @apiParam {Array} categories Array with categories.
 * @apiParam {Array} tags Array with tags.
 *
 * @apiSuccess {String} title Title of the blogs.
 * @apiSuccess {String} news_site News site that published the blog.
 * @apiSuccess {String} news_site_long Unformatted name of the news site that published the blog.
 * @apiSuccess {String} url URL of the blog.
 * @apiSuccess {String} featured_image Featured image of the blog.
 * @apiSuccess {Number} id ID from the news site.
 * @apiSuccess {Number} _id ID generated by SNAPI.
 * @apiSuccess {Number} date_published Date when news site added the blog.
 * @apiSuccess {Number} date_added Date when blog was added to SNAPI.
 * @apiSuccess {Array} categories Array with categories.
 * @apiSuccess {Array} tags Array with tags.
 *
 * @apiSuccessExample Success-Response:
 * HTTP/1.1 200 OK
 * {
 *   "docs": [
 *     {
 *
 *     }
 *   ],
 *   "totalDocs": 719,
 *   "limit": 10,
 *   "hasPrevPage": false,
 *   "hasNextPage": true,
 *   "page": 1,
 *   "totalPages": 72,
 *   "prevPage": null,
 *   "nextPage": 2
 * }
 *
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 400 Bad request
 *     {
 *       "message": "Uh-oh, something went wrong. Please try again!"
 *     }
 */
router.get('/', BlogsController.getBlogs);

/**
 * @api {post} /v1/blogs Post blogs
 * @apiName PostBlogs
 * @apiGroup Blogs
 * @apiVersion 1.0.0
 * @apiHeader {String} Authorization A bearer token
 * @apiPermission admin
 *
 * @apiParam {String} title Title of the blog.
 * @apiParam {String} news_site News site that published the blog.
 * @apiParam {String} news_site_long Unformatted name of the news site that published the blog.
 * @apiParam {String} url URL of the blog.
 * @apiParam {String} featured_image Featured image of the blog.
 * @apiParam {Number} id ID from the news site.
 * @apiParam {Number} _id ID generated by SNAPI.
 * @apiParam {Number} date_published Date when news site added the blog.
 * @apiParam {Number} date_added Date when blog was added to SNAPI.
 * @apiParam {Array} categories Array with categories.
 * @apiParam {Array} tags Array with tags.
 *
 * @apiSuccess {String} title Title of the blog.
 * @apiSuccess {String} news_site News site that published the blog.
 * @apiSuccess {String} news_site_long Unformatted name of the news site that published the blog.
 * @apiSuccess {String} url URL of the blog.
 * @apiSuccess {String} featured_image Featured image of the blog.
 * @apiSuccess {Number} id ID from the news site.
 * @apiSuccess {Number} _id ID generated by SNAPI.
 * @apiSuccess {Number} date_published Date when news site added the blog
 * @apiSuccess {Number} date_added Date when blog was added to SNAPI
 * @apiSuccess {Array} categories Array with categories.
 * @apiSuccess {Array} tags Array with tags.
 *
 * @apiSuccessExample Success-Response:
 *     HTTP/1.1 201 Created
 *{
 *   "message": "blog saved",
 *   "blog": {
 *       "date_published": 1550662153,
 *       "date_added": 1550662153,
 *       "tags": [
 *           "control",
 *           "russian",
 *           "radio",
 *           "telescope",
 *           "satellite",
 *           "lost"
 *       ],
 *       "categories": [
 *           "Space Exploration"
 *       ],
 *       "_id": "5c6d3eb769e4a32ec36c7240",
 *       "news_site": "phys",
 *       "news_site_long": "Phys",
 *       "title": "Control of Russian radio telescopasdasde satellite sdfsdfsdfsdflostsdfgdfgsdfsdfsdfdfssdfsdfdf",
 *       "url": "https://phys.org/news/2019-01-rusasdasdsian-radio-tsdfsdfelescopesdf-satellite-lossdfsddfsdfsdfgdfgft.html",
 *       "featured_image": "https://dummyimage.com/1024x1024/2c3e50/fcfcfc&text=No+Image+Available",
 *       "__v": 0
    }
 *}
 *
 *
 * @apiErrorExample Error-Response:
 *     HTTP/1.1 400 Bad request
 * {
 *   "error": "title, url and _id must be unique"
 * }
 *
 * @apiErrorExample Forbidden-Response:
 *     HTTP/1.1 403 Forbidden
 *     Forbidden
 */
router.post('/', jwtVerify, BlogsController.postBlogs);

/**
 * @api {delete} /v1/blogs Delete blogs
 * @apiName DeleteBlogs
 * @apiGroup Blogs
 * @apiVersion 1.0.0
 * @apiHeader {String} Authorization A bearer token
 * @apiPermission admin
 *
 * @apiParam {String} _id ID's of the blogs that you want to delete. Chain to delete multiple at the same time.
 */
router.delete('/', jwtVerify, BlogsController.deleteBlogs);

module.exports = router;
